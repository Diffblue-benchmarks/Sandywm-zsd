/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zsd.action.lore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.zsd.action.base.Transcode;
import com.zsd.factory.AppFactory;
import com.zsd.module.Chapter;
import com.zsd.module.Education;
import com.zsd.module.GradeSubject;
import com.zsd.module.LoreInfo;
import com.zsd.module.LoreQuestion;
import com.zsd.module.LoreQuestionSubInfo;
import com.zsd.page.PageConst;
import com.zsd.service.ChapterManger;
import com.zsd.service.EducationManager;
import com.zsd.service.LoreInfoManager;
import com.zsd.service.LoreQuestionManager;
import com.zsd.tools.CommonTools;
import com.zsd.tools.Convert;
import com.zsd.tools.CurrentTime;
import com.zsd.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 05-04-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class LoreAction extends DispatchAction {
	
	/**
	 * 导向知识典目录管理页面
	 * @author wm
	 * @date 2019-5-4 下午10:53:00 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goLoreCatalogPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("lorePage");
	}
	
	/**
	 * 根据章节编号分页获取知识点目录列表
	 * @author wm
	 * @date 2019-5-4 下午10:55:52 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getLoreCatalogData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer cptId = CommonTools.getFinalInteger("cptId", request);
		Integer count = lm.getCountByCptId(cptId);
		String msg = "暂无记录";
		Map<String,Object> map = new HashMap<String,Object>();
		if(count > 0){
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
			Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
			List<LoreInfo> loreList = lm.listPageInfoByCptId(cptId, pageNo, pageSize);
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<LoreInfo> it = loreList.iterator() ; it.hasNext();){
				LoreInfo lore = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("id", lore.getId());
				map_d.put("loreName", lore.getLoreName());
				Integer mainLoreId = lore.getMainLoreId();//被引用知识点
				if(mainLoreId > 0){
					LoreInfo lore_main = lm.getEntityById(mainLoreId);
					if(lore_main != null){
						map_d.put("mainLoreName", lore_main.getLoreName());
					}else{
						map_d.put("mainLoreName", "");
					}
				}else{//通用版
					map_d.put("mainLoreName", lore.getLoreName());
				}
				map_d.put("loreCode", lore.getLoreCode());
				map_d.put("inUse", lore.getInUse().equals(0) ? "有效" : "无效");
				map_d.put("freeStatus", lore.getFreeStatus());
				list_d.add(map_d);
			}
			map.put("data", list_d);
			map.put("count", count);
			map.put("code", 0);
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 增加通用版本知识点
	 * @author wm
	 * @date 2019-5-6 上午09:59:29
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addCommonLore(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		ChapterManger cm = (ChapterManger) AppFactory.instance(null).getApp(Constants.WEB_CHAPTER_INFO);
		Integer cptId = CommonTools.getFinalInteger("cptId", request);//章节编号
		Integer ediId = 0;//出版社编号
		Integer subId = 0;//学科编号
		String gradeName = "";
		String gradeCode = "";//年级号
		String eduVolume = "";
		String loreName = Transcode.unescape_new("loreName", request);
		String subIdCode = "";
		String msg = "error";
		if(lm.checkExistByCptId(cptId, loreName)){
			msg = "exist";
		}else{
			Chapter c = cm.getEntityById(cptId);
			if(c != null){
				msg = "success";
				Education edu = c.getEducation();
				ediId = edu.getEdition().getId();
				subId = edu.getGradeSubject().getSubject().getId();
				gradeName = edu.getGradeSubject().getGradeName();
				gradeCode = Convert.ChineseConvertNumber(gradeName);
				eduVolume = edu.getEduVolume();
				if(subId < 10){
					subIdCode = "0" + subId;
				}
				String paraCode = "";//学段号
				Integer gradeNum = Integer.parseInt(gradeCode);
				if(gradeNum < 7){
					paraCode = "01";
				}else if(gradeNum >= 7 && gradeNum <= 9){
					paraCode = "02";
				}else{
					paraCode = "03";
				}
				String eduVolumeCode = "02";//教材编号
				if(eduVolume.equals("上册")){
					eduVolumeCode = "01";
				}
				
				String ediIdCode = "";//出版社号
				if(ediId < 10){
					ediIdCode = "0" + ediId;
				}
				String cptIdCode = "";//章节号
				if(cptId < 10){
					cptIdCode = "0" + cptId;
				}
				String loreOrderCode = "";//知识点顺序
				Integer loreOrder = lm.getCurrentMaxOrderByCptId(cptId);
				if(loreOrder < 10){
					loreOrderCode = "0" + loreOrder;
				}
				
				String loreCode = subIdCode + "-" + paraCode + "-" + gradeCode + "-" + eduVolumeCode + "-" + ediIdCode + "-" + cptIdCode + "-" + loreOrderCode;
				lm.addLore(cptId, loreName, Convert.getFirstSpell(loreName), loreOrder, 0, loreCode);
				
			}
		}
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 根据知识点目录编号获取知识点目录详情
	 * @author wm
	 * @date 2019-5-9 上午11:34:20
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getLoreDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//知识点编号
		LoreInfo lore = lm.getEntityById(loreId);
		String msg = "noInfo";
		Map<String,Object> map = new HashMap<String,Object>();
		if(loreId > 0){
			msg = "success";
			map.put("loreId", lore.getId());
			map.put("loreName", lore.getLoreName());
			map.put("inUse", lore.getInUse());
			map.put("freeStatus", lore.getFreeStatus());
			map.put("loreOrder", lore.getLoreOrder());
			map.put("loreCode", lore.getLoreCode());
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改知识点信息（名称、排序、有效、免费）
	 * @author wm
	 * @date 2019-5-6 上午11:17:36
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateLoreDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);//知识点编号
		String loreName = Transcode.unescape_new("loreName", request);//知识点名称(""不修改)
		Integer loreOrder = CommonTools.getFinalInteger("loreOrder", request);//知识点排序号（-1不修改）
		Integer inUse = CommonTools.getFinalInteger("inUse", request);//显示状态(-1不修改)
		Integer freeStatus = CommonTools.getFinalInteger("freeStatus", request);//免费状态(-1不修改)
		LoreInfo lore = lm.getEntityById(loreId);
		String msg = "error";
		Map<String,String> map = new HashMap<String,String>();
		if(lore != null){
			if(!lore.getLoreName().equals(loreName)){//名字变化
				Integer cptId = lore.getChapter().getId();
				if(lm.checkExistByCptId(cptId, loreName)){
					msg = "existInfo";
				}else{
					msg = "success";
				}
			}else{
				msg = "success";
			}
			if(msg.equals("success")){
				boolean flag = lm.updateLore(loreId, loreName, -1, loreOrder, inUse, freeStatus);
				lm.updateLore(loreId, loreName, -1, loreOrder, inUse, freeStatus);
				if(flag){
					msg = "success";
				}else{
					msg = "error";
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 批量增加知识点名称(生成其他版本知识点的时候)
	 * @author wm
	 * @date 2019-5-6 上午11:24:17
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addBatchLoreData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		
		Map<String,String> map = new HashMap<String,String>();
		map.put("result", "success");
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 批量生成知识点编码(指定章节下批量修改)
	 * @author wm
	 * @date 2019-5-6 上午11:26:13
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateBatchLoreCode(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		ChapterManger cm = (ChapterManger) AppFactory.instance(null).getApp(Constants.WEB_CHAPTER_INFO);
		Integer cptId = CommonTools.getFinalInteger("cptId", request);//章节编号
		Integer ediId = 0;//出版社编号
		Integer subId = 0;//学科编号
		String gradeName = "";
		String gradeCode = "";//年级号
		String eduVolume = "";
		String subIdCode = "";
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		List<LoreInfo> loreList = lm.listPageInfoByCptId(cptId, 1, 100000);
		if(loreList.size() > 0){
			msg = "success";
			Chapter c = cm.getEntityById(cptId);
			if(c != null){
				Education edu = c.getEducation();
				ediId = edu.getEdition().getId();
				subId = edu.getGradeSubject().getSubject().getId();
				gradeName = edu.getGradeSubject().getGradeName();
				gradeCode = Convert.ChineseConvertNumber(gradeName);
				eduVolume = edu.getEduVolume();
				if(subId < 10){
					subIdCode = "0" + subId;
				}
				String paraCode = "";//学段号
				Integer gradeNum = Integer.parseInt(gradeCode);
				if(gradeNum < 7){
					paraCode = "01";
				}else if(gradeNum >= 7 && gradeNum <= 9){
					paraCode = "02";
				}else{
					paraCode = "03";
				}
				String eduVolumeCode = "02";//教材编号
				if(eduVolume.equals("上册")){
					eduVolumeCode = "01";
				}
				
				String ediIdCode = "";//出版社号
				if(ediId < 10){
					ediIdCode = "0" + ediId;
				}
				String cptIdCode = "";//章节号
				if(cptId < 10){
					cptIdCode = "0" + cptId;
				}
				List<Object> list_d = new ArrayList<Object>();
				for(Iterator<LoreInfo> it = loreList.iterator() ; it.hasNext();){
					LoreInfo lore = it.next();
					Map<String,String> map_d = new HashMap<String,String>();
					Integer loreOrder = lore.getLoreOrder();
					String loreOrderCode = "";
					if(loreOrder < 10){
						loreOrderCode = "0" + loreOrder;
					}
					String loreCode = subIdCode + "-" + paraCode + "-" + gradeCode + "-" + eduVolumeCode + "-" + ediIdCode + "-" + cptIdCode + "-" + loreOrderCode;
					Boolean flag = lm.updateLoreCodeById(lore.getId(), loreCode);
					if(flag){
						map_d.put("codeResult", "succ");
						map_d.put("codeInfo", "知识点[" + lore.getLoreName() + "]增加编码成功");
					}else{
						map_d.put("codeResult", "fail");
						map_d.put("codeInfo", "知识点[" + lore.getLoreName() + "]增加编码失败");
					}
					list_d.add(map_d);
				}
				map.put("codeList", list_d);
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 导向知识点管理页面
	 * @author wm
	 * @date 2019-5-6 上午11:45:56
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goLoreQuePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("loreQuePage");
	}
	
	/**
	 * 根据章节分页获取知识点列表
	 * @author wm
	 * @date 2019-5-6 上午11:52:27
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getPageLoreData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreInfoManager lm = (LoreInfoManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_INFO);
		Integer cptId = CommonTools.getFinalInteger("cptId", request);
		Integer count = lm.getCountByCptId(cptId);
		String msg = "暂无记录";
		Map<String,Object> map = new HashMap<String,Object>();
		if(count > 0){
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
			Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
			List<LoreInfo> loreList = lm.listPageInfoByCptId(cptId, pageNo, pageSize);
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<LoreInfo> it = loreList.iterator() ; it.hasNext();){
				LoreInfo lore = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("loreId", lore.getId());
				map_d.put("loreName", lore.getLoreName());
				map_d.put("inUse", lore.getInUse().equals(0) ? "有效" : "无效");
				Chapter cpt = lore.getChapter();
				String cptName = cpt.getChapterName();//章节名称
				map_d.put("cptName",cptName);
				Education edu = cpt.getEducation();
				String eduVolume = edu.getEduVolume();//教材
				map_d.put("eduVolume",eduVolume);
				GradeSubject gs = edu.getGradeSubject();
				String gradeName = gs.getGradeName();//年级
				map_d.put("gradeName",gradeName);
				String subName = gs.getSubject().getSubName();//学科
				map_d.put("subName",subName);
				list_d.add(map_d);
			}
			map.put("data", list_d);
			map.put("count", count);
			map.put("code", 0);
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 分页获取指定知识点的题库列表
	 * @author wm
	 * @date 2019-5-6 下午05:22:33
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getPageLoreQuesionData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Integer count = lqm.getCountByLoreId(loreId);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "暂无记录";
		if(count > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
			Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
			List<LoreQuestion> lqList = lqm.listPageInfoByLoreId(loreId, pageNo, pageSize);
			for(Iterator<LoreQuestion> it = lqList.iterator(); it.hasNext();){
				LoreQuestion lq = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("lqId", lq.getId());
				map_d.put("lqTitle", lq.getQueTitle());
				map_d.put("lqType", lq.getLoreTypeName());
				map_d.put("inUse", lq.getInUse().equals(0) ? "有效" : "无效");
				list_d.add(map_d);
			}
			map.put("data", list_d);
			map.put("count", count);
			map.put("code", 0);
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取知识点题库详情
	 * @author wm
	 * @date 2019-5-10 上午08:42:21
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getLoreQuesionDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		Integer lqId = CommonTools.getFinalInteger("lqId", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		LoreQuestion lq = lqm.getEntityByLqId(lqId);
		if(lq != null){
			msg = "success";
			String loreType = lq.getLoreTypeName();
			List<Object> list_d = new ArrayList<Object>();
			if(loreType.equals("知识清单") || loreType.equals("点拨指导")){
				List<LoreQuestionSubInfo> lqsList = lqm.listLQSInfoByLqId(lqId);
				if(lqsList.size() > 0){
					for(Iterator<LoreQuestionSubInfo> it = lqsList.iterator(); it.hasNext();){
						LoreQuestionSubInfo lqs = it.next();
						Map<String,Object> map_d = new HashMap<String,Object>();
						map_d.put("lqId", lqId);
						map_d.put("lqsId", lqs.getId());
						map_d.put("lqsTitle", lqs.getLqsTitle());
						map_d.put("lqsCon", lqs.getLqsContent());
						if(loreType.equals("知识清单")){
							map_d.put("lqType", loreType);
						}else{
							map_d.put("lqType", lqs.getLoreTypeName());
						}
						list_d.add(map_d);
					}
					map.put("listIfo", list_d);
				}
			}else if(loreType.equals("解题示范")){
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("lqId", lqId);
				map_d.put("lqTitle", lq.getQueTitle());
				map_d.put("loreName", lq.getLoreInfo().getLoreName());
				map_d.put("lqSub", lq.getQueSub());
				map_d.put("lqAnswer", lq.getQueAnswer());
				map_d.put("lqResolution", lq.getQueResolution());
				map_d.put("lqType", loreType);
				map.put("listIfo", list_d);
			}else if(loreType.equals("知识讲解")){
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("lqId", lqId);
				map_d.put("loreName", lq.getLoreInfo().getLoreName());
				map_d.put("lqSub", lq.getQueSub());
				map_d.put("lqAnswer", lq.getQueAnswer());
				map_d.put("lqType", loreType);
				map.put("listIfo", list_d);
			}else{//巩固训练，针对性诊断，再次诊断
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("lqId", lqId);
				map_d.put("lqTitle", lq.getQueTitle());
				map_d.put("loreName", lq.getLoreInfo().getLoreName());
				String queType = lq.getQueType();
				map_d.put("queType", queType);
				map_d.put("queType2", lq.getQueType2());
				Integer lexId = lq.getLexId();
				map_d.put("lexId", lexId);
				if(lexId > 0){
					//后续增加
				}
				map_d.put("lqSub", lq.getQueSub());
				String answerA = lq.getA();
				String answerB = lq.getB();
				String answerC = lq.getC();
				String answerD = lq.getD();
				String answerE = lq.getE();
				String answerF = lq.getF();
				map_d.put("anserA", answerA);
				map_d.put("anserB", answerB);
				map_d.put("anserC", answerC);
				map_d.put("anserD", answerD);
				map_d.put("anserE", answerE);
				map_d.put("anserF", answerF);
				map_d.put("lqAnswer", lq.getQueAnswer());
				Integer queOptNum = 0;//问题选项
				Integer answerNum = 0;//答案数量
				if(queType.equals("单选题") || queType.equals("多选题") || queType.equals("填空选择题")){
					//有最大选项
					if(!answerA.equals("")){
						queOptNum++;
					}
					if(!answerB.equals("")){
						queOptNum++;
					}
					if(!answerC.equals("")){
						queOptNum++;
					}
					if(!answerD.equals("")){
						queOptNum++;
					}
					if(!answerE.equals("")){
						queOptNum++;
					}
					if(!answerF.equals("")){
						queOptNum++;
					}
					map_d.put("queOptNum", queOptNum);
					if(queType.equals("填空选择题")){
						//有最大选项和填空数量
						answerNum = lq.getQueAnswer().split("&zsd&").length;//多个答案用&zsd&隔开
						map_d.put("answerNum", answerNum);
					}
				}
				map_d.put("lqResolution", lq.getQueResolution());
				Integer queTipId = lq.getQueTips();
				map_d.put("queTipId", queTipId);
				if(queTipId > 0){//提示为知识清单或者点拨指导的一内容
					LoreQuestionSubInfo  lqs = lqm.getEntityByLqsId(queTipId);
					if(lqs != null){
						map_d.put("queTipTitle", lqs.getLqsTitle());
						map_d.put("queTipCon", lqs.getLqsContent());
						map_d.put("queTipType", lqs.getLoreTypeName());
					}
				}
				map_d.put("lqType", loreType);
				map.put("listIfo", list_d);
			}
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 修改指定的知识点题库/题库子表
	 * @author wm
	 * @date 2019-5-10 上午11:10:52
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateLoreQuesionDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		Integer lqId = CommonTools.getFinalInteger("lqId", request);
		String msg = "noInfo";
		String option = CommonTools.getFinalStr("option", request);//内容为错误类型+时间范围+修改状态+当前知识点修改状态+错题主键lqId+发送错题用户编号
		if(!option.equals("")){//通过错题过来修改
			String currLoreUpdateStatus = option.split(",")[3];
			if(currLoreUpdateStatus.equals("1")){//之前已经被修改完成，不能再进行修改
				msg = "noUpdate";
			}else{
				lqId = Integer.parseInt(option.split(",")[4]);
			}
		}
		Map<String,Object> map = new HashMap<String,Object>();
		LoreQuestion lq = lqm.getEntityByLqId(lqId);
		if(lq != null){
			msg = "success";
			String operateUserName = CommonTools.getLoginAccount(request);
			String loreType = lq.getLoreTypeName();
			if(loreType.equals("知识清单") || loreType.equals("点拨指导")){
				String lqsIdStr_up = CommonTools.getFinalStr("lqsIdStr_up", request);//页面所有需要修改的子表编号，多个用&zsd&隔开
				String lqsIdStr_del = CommonTools.getFinalStr("lqsIdStr_del", request);//页面所有需要删除的子表编号，多个用&zsd&隔开
				String lqsTitleStr = Transcode.unescape_new1("lqsTitleStr", request);//页面所有需要修改的子表标题，多个用&zsd&隔开
				String lqsConStr = Transcode.unescape_new1("lqsConStr", request);//页面所有需要修改的子表内容，多个用&zsd&隔开
				//修改
				if(!lqsIdStr_up.equals("")){
					String[] lqsIdArr = lqsIdStr_up.split("&zsd&");
					String[] lqsTitleArr = lqsTitleStr.split("&zsd&");
					String[] lqsConArr = lqsConStr.split("&zsd&");
					for(Integer i = 0 ; i < lqsIdArr.length ; i++){
						Integer lqsId = Integer.parseInt(lqsIdArr[i]);
						String lqsTitle = lqsTitleArr[i];
						String lqsCon = lqsConArr[i];
						lqm.updateLoreQuestionSubByLqsId(lqsId, lqsTitle, lqsCon, operateUserName, CurrentTime.getCurrentTime());
					}
				}
				//删除
				if(!lqsIdStr_del.equals("")){
					String[] lqsIdArr = lqsIdStr_del.split("&zsd&");
					for(Integer i = 0 ; i < lqsIdArr.length ; i++){
						Integer lqsId = Integer.parseInt(lqsIdArr[i]);
						lqm.delLoreQuestionSubByLqsId(lqsId);
					}
				}
			}else if(loreType.equals("解题示范") || loreType.equals("知识讲解")){
				String queSub = Transcode.unescape_new1("queSub", request);
				String queAnswer = Transcode.unescape_new1("queAnswer", request);
				String queResolution = "";
				if(loreType.equals("解题示范")){
					queResolution = Transcode.unescape_new1("queResolution", request);
				}
				lqm.updateSimpleLoreQuestionByLqId(lqId, queSub, queAnswer, queResolution, operateUserName, CurrentTime.getCurrentTime());
			}else{//巩固训练、针对性诊断、再次诊断
				String queType = Transcode.unescape_new1("queType", request);//类型
				String queType2 = Transcode.unescape_new1("queType2", request);//类型二
				Integer queTipId = CommonTools.getFinalInteger("queTipId", request);//词条编号（提示）
				Integer lexId = CommonTools.getFinalInteger("lexId", request);//词库编号
				String queSub = Transcode.unescape_new1("queSub", request);//题干
				String answerA = Transcode.unescape_new1("answerA", request);
				String answerB = Transcode.unescape_new1("answerB", request);
				String answerC = Transcode.unescape_new1("answerC", request);
				String answerD = Transcode.unescape_new1("answerD", request);
				String answerE = Transcode.unescape_new1("answerE", request);
				String answerF = Transcode.unescape_new1("answerF", request);
				String queAnswer = Transcode.unescape_new1("queAnswer", request);//答案，多个用&zsd&
				String queResolution = Transcode.unescape_new1("queResolution", request);//解析
				lqm.updateLoreQuestion(lqId, queSub, queAnswer, queTipId, lexId, queResolution, queType, queType2, 
						answerA, answerB, answerC, answerD, answerE, answerF, operateUserName, CurrentTime.getCurrentTime());
				if(!option.equals("")){//通过错题过来修改
					//修改知识点错误表信息
					
					Integer stuId = Integer.parseInt(option.split(",")[5]);//提交错误题的学生编号
					//奖励学生金币
				}
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 设置知识点题库有/无效状态
	 * @author wm
	 * @date 2019-5-10 上午11:12:03
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward updateLQInUse(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		Integer lqId = CommonTools.getFinalInteger("lqId", request);
		Integer inUse = CommonTools.getFinalInteger("inUse", request);//0:有效，1：无效
		Map<String,String> map = new HashMap<String,String>();
		String msg = "error";
		LoreQuestion lq = lqm.getEntityByLqId(lqId);
		if(lq != null){
			if(inUse.equals(0) || inUse.equals(1)){
				lqm.updateInUseStatusById(lqId, inUse, CommonTools.getLoginAccount(request), CurrentTime.getCurrentTime());
				msg = "success";
			}
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 浏览指定知识点、指定类型的的题库
	 * @author wm
	 * @date 2019-5-10 下午06:57:38
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getLoreQuestionData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		LoreQuestionManager lqm = (LoreQuestionManager) AppFactory.instance(null).getApp(Constants.WEB_LORE_QUESTION_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		String loreType = Transcode.unescape_new1("loreType", request);
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		List<LoreQuestion> lqList = lqm.listInfoByLoreId(loreId, loreType, -1);
		if(lqList.size() > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<LoreQuestion> it = lqList.iterator() ; it.hasNext();){
				LoreQuestion lq = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				String loreType_db = lq.getLoreTypeName();
				if(loreType_db.equals("知识清单") || loreType_db.equals("点拨指导")){
					map_d.put("loreType", loreType_db);
					List<LoreQuestionSubInfo> lqsList = lqm.listLQSInfoByLqId(lq.getId());
					if(lqsList.size() > 0){
						List<Object> list_d_1 = new ArrayList<Object>();
						for(Iterator<LoreQuestionSubInfo> it_1 = lqsList.iterator() ; it_1.hasNext();){
							LoreQuestionSubInfo lqs = it_1.next();
							Map<String,Object> map_d_1 = new HashMap<String,Object>();
							map_d_1.put("lqsType", lqs.getLoreTypeName());//重点，难点，关键点，易混点
							map_d_1.put("lqsTitle", lqs.getLqsTitle());
							map_d_1.put("lqsCon", lqs.getLqsContent());
							list_d_1.add(map_d_1);
						}
						map_d.put("conList", list_d_1);
					}
				}
			}
		}
		return null;
	}
}