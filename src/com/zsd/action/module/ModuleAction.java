/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zsd.action.module;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.zsd.tools.CommonTools;
import com.zsd.factory.AppFactory;
import com.zsd.module.ActRoleInfo;
import com.zsd.module.ModuleActionInfo;
import com.zsd.module.ModuleInfo;
import com.zsd.service.ActRoleInfoManager;
import com.zsd.service.ModuleActionInfoManager;
import com.zsd.service.ModuleManager;
import com.zsd.service.RoleInfoManager;
import com.zsd.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 05-05-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ModuleAction extends DispatchAction {
	
	/**
	 * 导向模块页面
	 * @author Administrator
	 * @date 2019-5-5 下午04:50:38
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goModPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("modPage");
	}
	
	/**
	 * 导向角色权限设置模块
	 * @author Administrator
	 * @date 2019-5-5 下午04:55:53
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goRoleAbilityPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("abilityPage");
	}
	
	/**
	 * 获取平台角色权限详情
	 * @author Administrator
	 * @date 2019-5-5 下午05:01:58
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getRoleAbilityDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		ModuleManager mm = (ModuleManager) AppFactory.instance(null).getApp(Constants.WEB_MODULE_INFO);
		ModuleActionInfoManager mam = (ModuleActionInfoManager) AppFactory.instance(null).getApp(Constants.WEB_MODULE_ACTION_INFO);
		ActRoleInfoManager arm = (ActRoleInfoManager) AppFactory.instance(null).getApp(Constants.WEB_ACT_ROLE_INFO);
		RoleInfoManager rm = (RoleInfoManager)  AppFactory.instance(null).getApp(Constants.WEB_ROLE_INFO);
		List<ModuleInfo> mList = mm.listAllInfo();
		Integer selRoleId = CommonTools.getFinalInteger(request.getParameter("selRoleId"));
		Map<String,Object> map = new HashMap<String,Object>();
		//获取当前平台有那些角色列表
		String msg = "noInfo";
		if(mList.size() > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<ModuleInfo> it = mList.iterator() ; it.hasNext();){
				ModuleInfo mod = it.next();
				Map<String,Object> map_1 = new HashMap<String,Object>();
				//获取该模块下的模块动作列表
				List<ModuleActionInfo> maList = mam.listInfoByModId(mod.getId());
				List<Object> list_ma = new ArrayList<Object>();
				for(Iterator<ModuleActionInfo> it_1 = maList.iterator() ; it_1.hasNext();){
					ModuleActionInfo ma = it_1.next();
					Map<String,Object> map_2 = new HashMap<String,Object>();
					Integer maId = ma.getId();
					map_2.put("maId", maId);
					map_2.put("actNameChi", ma.getActNameChi());
					map_2.put("actNameEng", ma.getActNameEng());
					map_2.put("orderNo", ma.getActOrder());
					map_2.put("modId",mod.getId());
					if(selRoleId > 0){
						List<ActRoleInfo> arList = arm.listInfoByOpt(selRoleId, maId);
						if(arList.size() == 0){
							map_2.put("bindFlag",false);
						}else{
							map_2.put("bindFlag",true);
						}
					}else{
						map_2.put("bindFlag",false);
					}
					list_ma.add(map_2);
				}
				map_1.put("modActInfo", list_ma);
				list_d.add(map_1);
			}
			map.put("result", list_d);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
}