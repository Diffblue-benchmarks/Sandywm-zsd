/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.zsd.action.buffet;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.zsd.dao.BuffetAllDao;
import com.zsd.factory.AppFactory;
import com.zsd.module.BuffetAbilityRelationInfo;
import com.zsd.module.BuffetLoreRelateInfo;
import com.zsd.module.BuffetMindRelationInfo;
import com.zsd.module.BuffetQueInfo;
import com.zsd.module.LoreInfo;
import com.zsd.page.PageConst;
import com.zsd.service.BuffetAllManager;
import com.zsd.service.BuffetLoreRelateInfoManager;
import com.zsd.service.BuffetQueInfoManager;
import com.zsd.tools.CommonTools;
import com.zsd.tools.CurrentTime;
import com.zsd.util.Constants;

/** 
 * MyEclipse Struts
 * Creation date: 05-21-2019
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class BuffetAction extends DispatchAction {
	
	/**
	 * 导向自助餐管理页面
	 * @author wm
	 * @date 2019-5-21 下午03:51:35
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward goBuffetPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("buffetPage");
	}
	
	/**
	 * 根据条件分页获取自助餐列表
	 * @author wm
	 * @date 2019-5-21 下午03:51:49
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception 
	 */
	public ActionForward getPageBuffetInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		BuffetQueInfoManager bm = (BuffetQueInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_QUE_INFO);
		BuffetAllManager bam = (BuffetAllManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_ALL_INFO);
		Integer loreId = CommonTools.getFinalInteger("loreId", request);
		Integer count = bm.getCountByLoreId(loreId);
		String msg = "暂无记录";
		Map<String,Object> map = new HashMap<String,Object>();
		if(count > 0){
			Integer pageSize = PageConst.getPageSize(String.valueOf(request.getParameter("limit")), 10);//等同于pageSize
			Integer pageNo = CommonTools.getFinalInteger("page", request);//等同于pageNo
			List<BuffetQueInfo> bList = bm.listPageInfoByLoreId(loreId, pageNo, pageSize);
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Iterator<BuffetQueInfo> it = bList.iterator() ; it.hasNext();){
				BuffetQueInfo buffet = it.next();
				Map<String,Object> map_d = new HashMap<String,Object>();
				Integer buffetId = buffet.getId();
				map_d.put("id", buffetId);
				map_d.put("btName", buffet.getBuffetTypeInfo().getTypes());//类型
				map_d.put("loreName", buffet.getLoreInfo().getLoreName());
				map_d.put("loreTitle", buffet.getTitle());
				String mindStr = "";
				String abilityStr = "";
				List<BuffetMindRelationInfo> bmList = bam.listBMRInfoByBuffetId(buffetId);
				if(bmList.size() > 0){
					for(Integer i = 0 ; i < bmList.size() ; i++){
						mindStr += bmList.get(i).getBuffetMindTypeInfo().getMind() + "、";
					}
					mindStr = mindStr.substring(0, mindStr.length() - 1);
				}
				List<BuffetAbilityRelationInfo> baList = bam.listBARInfoByBuffetId(buffetId);
				if(baList.size() > 0){
					for(Integer i = 0 ; i < baList.size() ; i++){
						abilityStr += baList.get(i).getBuffetAbilityTypeInfo().getAbility() + "、";
					}
					abilityStr = abilityStr.substring(0, abilityStr.length() - 1);
				}
				map_d.put("mindStr", mindStr);
				map_d.put("abilityStr", abilityStr);
				map_d.put("inUse", buffet.getInUse().equals(0) ? "有效" : "无效");
				list_d.add(map_d);
			}
			map.put("data", list_d);
			map.put("count", count);
			map.put("code", 0);
		}
		map.put("msg", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 设置自助餐题库有/无效状态
	 * @author wm
	 * @date 2019-5-21 下午05:31:54
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward setInUseStatus(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		BuffetQueInfoManager bm = (BuffetQueInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_QUE_INFO);
		Integer buffetId = CommonTools.getFinalInteger("buffetId", request);
		Integer inUse = CommonTools.getFinalInteger("inUse", request);//有效状态（0：有效，1：无效）
		Map<String,String> map = new HashMap<String,String>();
		String msg = "error";
		boolean flag = bm.updateInUseStatusById(buffetId, inUse, CommonTools.getLoginAccount(request), CurrentTime.getStringDate());
		if(flag){
			msg = "success";
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 设置关联知识点(增加，删除)
	 * @author wm
	 * @date 2019-5-21 下午05:38:04
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward addRelateLore(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		BuffetQueInfoManager bm = (BuffetQueInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_QUE_INFO);
		BuffetLoreRelateInfoManager blrm = (BuffetLoreRelateInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_LORE_RELATE_INFO);
		String opt = CommonTools.getFinalStr("opt", request);//操作方式(add,del)
		Map<String,String> map = new HashMap<String,String>();
		String msg = "error";
		if(opt.equals("add")){
			Integer buffetId = CommonTools.getFinalInteger("buffetId", request);
			Integer loreId = CommonTools.getFinalInteger("loreId", request);//通用版知识点
			BuffetQueInfo buffet =  bm.getEntityById(buffetId);
			if(buffet != null){
				if(blrm.listInfoByOpt(buffetId, loreId).size() == 0){
					Integer blrId = blrm.addBLR(buffetId, loreId, 1, buffet.getLoreInfo().getId());
					if(blrId > 0){
						msg = "success";
					}
				}else{
					msg = "exist";
				}
			}
		}else if(opt.equals("del")){
			Integer blrId = CommonTools.getFinalInteger("blrId", request);
			boolean flag = blrm.delBLRById(blrId);
			if(flag){
				msg = "success";
			}
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
	
	/**
	 * 获取指定自助餐的关联知识点
	 * @author wm
	 * @date 2019-5-21 下午05:53:22
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward getRelateLoreInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		BuffetLoreRelateInfoManager blrm = (BuffetLoreRelateInfoManager) AppFactory.instance(null).getApp(Constants.WEB_BUFFET_LORE_RELATE_INFO);
		Integer buffetId = CommonTools.getFinalInteger("buffetId", request);
		List<BuffetLoreRelateInfo> blrList = blrm.listInfoByBuffetId(buffetId);
		Integer blrSize = blrList.size();
		Map<String,Object> map = new HashMap<String,Object>();
		String msg = "noInfo";
		if(blrSize > 0){
			msg = "success";
			List<Object> list_d = new ArrayList<Object>();
			for(Integer i = 0 ; i < blrSize ; i++){
				BuffetLoreRelateInfo blr = blrList.get(i);
				Map<String,Object> map_d = new HashMap<String,Object>();
				map_d.put("blrId", blr.getId());
				map_d.put("relateLoreName", blr.getLoreInfoByLoreId().getLoreName());
				list_d.add(map_d);
			}
			map.put("loreList", list_d);
		}
		map.put("result", msg);
		CommonTools.getJsonPkg(map, response);
		return null;
	}
}